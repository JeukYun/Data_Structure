## 자료구조 ## -> 요리의 재료

## 선형자료구조
# 1. 리스트
    # 1) 선형(순차) 리스트 : 배열 -> 빈틈 없이 붙어 있음
    #   장점 : 메모리가 적게 든다 = 비용 절약, 전체 접근 빠름.
    #   단점 : OverHead 발생 (삽입/삭제 시)
    #   -> 삽입/삭제가 일어나지 않는 데이터에 적합 (ex:시간순서로 발생/기록되는 데이터)

    # 2) 단순 연결 리스트 (Data + Link) : 논리적으로 붙어있으나, 물리적으로 떨어짐
    #   장점 : 삽입/삭제 시 OverHead 발생X
    #   단점 : 많은 메모리 필요, 전체 접근 느림

    # 3) 원형 연결 리스트 : 마지막 노드의 Link == Head

# 2. 스택
    # 출구가 막혀있는 구조,
    # 선입 후출 FILO LIFO
    # push() : 데이터 삽입, pop() : 데이터 추출, top : 데이터 위치
    # isStackFull : 오버플로우 방지 -> top == SIZE -1
    # isStackEmpty : 언더플로우 방지 -> top == -1

# 3. 큐
    # 1) 순차큐
    # 출구가 뚫린 구조 -> 터널
    # 선입 선출 FIFO LILO
    # enQeue(), deQueue(), front, rear
    # isQueueFull() -> 대용량 시 overhead 발생 -> 원형 큐
    # 초기값 front = rear == -1

    # 2) 원형큐
    # 꼬리가 다시 머리로 연결된 구조.
    # 초기값 front = rear == 0, %SIZE

## 비선형 자료구조
# 1. 트리
    # 이진트리 : TreeNode(left, data, right) -> 작은 것 왼쪽, 큰것 오른쪽..
    # 쿼드 트리 : 지도에서 주로 사용

# 2. 그래프
    # 방향/ 무방향 그래프
    # 정점, 에지, 순회, 깊이/너비 우선 탐색


## 알고리즘 ## ->요리법

# 정렬
    # 1) 선택정렬 : 최소값 찾기 -> 대용량 시 overhead 발생
    # 2) (퀵정렬)

# 검색
    # 순차 검색 : 정렬 안 된 데이터 검색 시 -> 속도 느림
    # 이진 검색 : 정렬 된 데이터 검색 시 -> 속도 빠름

# 재귀 : 사례